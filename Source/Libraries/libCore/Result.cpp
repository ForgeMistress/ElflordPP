///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Result.cpp
//
//  A result of an operation.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Elflord 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "Result.h"
#include <sstream>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error::Error()
: _code(nullptr)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error::Error(const ErrorCode* errorCode, const String& details)
: _code(errorCode)
, _details(details)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error::Error(const Error& error)
: _code(error._code)
, _details(error._details)
{
}

Error::Error(Error&& other)
: _code(other._code)
, _details(std::move(other._details))
{
	other._code = nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error::operator String() const
{
	std::stringstream ss;
	ss << "[" << _code->_code << "] ERROR: " << _code->_message;
	if(!_details.empty())
		ss << std::endl << "    DETAILS: " << _details;
	return ss.str();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error::operator uint32_t() const
{
	return _code->_code;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error& Error::operator=(const Error& e)
{
	if(this != &e)
	{
		_code = e._code;
		_details = e._details;
	}
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Error::operator==(const Error& e) const
{
	return _code->_code == e._code->_code;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Error::Set(const ErrorCode* code, const String& details)
{
	_code = code;
	_details = details;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error::operator bool() const
{ 
	return _code != nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint32_t ErrorCode::s_errorCodes = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ErrorCode::ErrorCode(const String& message)
: _code(++s_errorCodes)
, _message(message)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ErrorCode::operator String() const 
{ 
	return _message; 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ErrorCode::operator const String&() const
{ 
	return _message; 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ErrorCode::operator uint32_t() const
{ 
	return _code;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
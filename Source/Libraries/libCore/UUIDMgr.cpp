///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  UUIDMgr
//
//  Obtain for thyself a unique identifier, one that shall be known and feared throughout the cosmos.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "UUIDMgr.h"

#ifdef FIRE_PLATFORM_WINDOWS
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UUIDMgr::UUIDMgr()
: _systemPageSize(GetSystemPageSize())
{
	_trackedPages.reserve(20);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UUIDMgr::~UUIDMgr()
{
	for(size_t i=0; i<_trackedPages.size(); ++i)
	{
		Free(_trackedPages[i]);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UUID UUIDMgr::Get() const
{
	if(!_uuidBlock || _numIDsUsed == _systemPageSize)
	{
		_uuidBlock = Alloc();
		_numIDsUsed = 0;
	}
	return (UUID)((char*)_uuidBlock + _numIDsUsed++);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef FIRE_PLATFORM_WINDOWS
size_t UUIDMgr::GetSystemPageSize() const
{
	SYSTEM_INFO info;
	GetSystemInfo(&info);
	return info.dwPageSize;
}
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef FIRE_PLATFORM_WINDOWS
void* UUIDMgr::Alloc() const
{
	return VirtualAlloc(nullptr, _systemPageSize, MEM_RESERVE, PAGE_READONLY);
}
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef FIRE_PLATFORM_WINDOWS
void UUIDMgr::Free(void* pageStart)
{
	VirtualFree(pageStart, 0, MEM_RELEASE);
}
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Entity.cpp
//
//  A collection of components.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Project Elflord 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "Entity.h"
#include "Component.h"

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FIRE_MIRROR_DEFINE(Firestorm::Entity)
{
	_class.property("name",       &Entity::_name);
	_class.property("components", &Entity::_components);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Entity::Entity()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Entity::~Entity()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void* Entity::DoInspect(Mirror::Type type)
{
	/*void* output = nullptr;
	for(auto component : _components)
	{
		output = component->Inspect(type);
		if(output != nullptr)
		{
			return output;
		}
	}*/
	return IInspectableObject::DoInspect(type);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
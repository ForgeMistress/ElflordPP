///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  MeshResource
//
//  Loads up the vertex data for a mesh and loads it to the video card.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Project Elflord 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef LIBSCENE_MESHRESOURCE_H_
#define LIBSCENE_MESHRESOURCE_H_
#pragma once

#include "RenderMgr.h"

OPEN_NAMESPACE(Firestorm);

class MeshResource final : public IResourceObject
{
	FIRE_MIRROR_DECLARE(MeshResource);
public:
	MeshResource();
	virtual ~MeshResource();

private:
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct MeshLoader final : public ResourceLoader
{
	MeshLoader(RenderMgr& renderMgr);
	~MeshLoader();

	virtual LoadResult Load(const ResourceReference& ref) override;
private:

	RenderMgr&                 _renderMgr;
	Json::CharReaderBuilder    _builder;
	Json::CharReader*          _reader;
	ObjectPool<MeshResource>   _meshPool;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);

#endif
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  VkRenderPass
//
//  Implementation of the RenderPass class for the Vulkan backend.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef LIBSCENE_ENUMERATIONS_H_
#define LIBSCENE_ENUMERATIONS_H_
#pragma once

OPEN_NAMESPACE(Firestorm);

enum struct PrimitiveTopology : uint8_t
{
	kPOINT_LIST = 0,
	kLINE_LIST = 1,
	kLINE_STRIP = 2,
	kTRIANGLE_LIST = 3,
	kTRIANGLE_STRIP = 4,
	kTRIANGLE_FAN = 5,
	kLINE_LIST_WITH_ADJACENCY = 6,
	kLINE_STRIP_WITH_ADJACENCY = 7,
	kTRIANGLE_LIST_WITH_ADJACENCY = 8,
	kTRIANGLE_STRIP_WITH_ADJACENCY = 9,
	kPATCH_LIST = 10,
};

enum struct ShaderType
{
	kVERTEX = 0x00000001,
	kTESSELLATION_CONTROL = 0x00000002,
	kTESSELLATION_EVALUATION = 0x00000004,
	kGEOMETRY = 0x00000008,
	kFRAGMENT = 0x00000010,
	kCOMPUTE = 0x00000020,
	kALL_GRAPHICS = 0x0000001F,
};

enum struct PolyMode : uint8_t
{
	kFill,
	kLine,
	kPoint
};

enum CullingMode : uint8_t
{
	kNONE = 0,
	kFRONT_BIT = 0x00000001,
	kBACK_BIT = 0x00000002,
	kFRONT_AND_BACK = 0x00000003,
};

enum struct FrontFace : uint8_t
{
	kCOUNTER_CLOCKWISE = 0,
	kCLOCKWISE = 1,
};

// direct copy of VkSampleCountFlagBits
enum SampleCountFlags : uint8_t
{
	k1_BIT = 0x00000001,
	k2_BIT = 0x00000002,
	k4_BIT = 0x00000004,
	k8_BIT = 0x00000008,
	k16_BIT = 0x00000010,
	k32_BIT = 0x00000020,
	k64_BIT = 0x00000040
};

enum struct BlendFactor : uint8_t
{
	kZERO = 0,
	kONE = 1,
	kSRC_COLOR = 2,
	kONE_MINUS_SRC_COLOR = 3,
	kDST_COLOR = 4,
	kONE_MINUS_DST_COLOR = 5,
	kSRC_ALPHA = 6,
	kONE_MINUS_SRC_ALPHA = 7,
	kDST_ALPHA = 8,
	kONE_MINUS_DST_ALPHA = 9,
	kCONSTANT_COLOR = 10,
	kONE_MINUS_CONSTANT_COLOR = 11,
	kCONSTANT_ALPHA = 12,
	kONE_MINUS_CONSTANT_ALPHA = 13,
	kSRC_ALPHA_SATURATE = 14,
	kSRC1_COLOR = 15,
	kONE_MINUS_SRC1_COLOR = 16,
	kSRC1_ALPHA = 17,
	kONE_MINUS_SRC1_ALPHA = 18
};

enum struct BlendOp
{
	kADD = 0,
	kSUBTRACT = 1,
	kREVERSE_SUBTRACT = 2,
	kMIN = 3,
	kMAX = 4,
	kZERO_EXT = 1000148000,
	kSRC_EXT = 1000148001,
	kDST_EXT = 1000148002,
	kSRC_OVER_EXT = 1000148003,
	kDST_OVER_EXT = 1000148004,
	kSRC_IN_EXT = 1000148005,
	kDST_IN_EXT = 1000148006,
	kSRC_OUT_EXT = 1000148007,
	kDST_OUT_EXT = 1000148008,
	kSRC_ATOP_EXT = 1000148009,
	kDST_ATOP_EXT = 1000148010,
	kXOR_EXT = 1000148011,
	kMULTIPLY_EXT = 1000148012,
	kSCREEN_EXT = 1000148013,
	kOVERLAY_EXT = 1000148014,
	kDARKEN_EXT = 1000148015,
	kLIGHTEN_EXT = 1000148016,
	kCOLORDODGE_EXT = 1000148017,
	kCOLORBURN_EXT = 1000148018,
	kHARDLIGHT_EXT = 1000148019,
	kSOFTLIGHT_EXT = 1000148020,
	kDIFFERENCE_EXT = 1000148021,
	kEXCLUSION_EXT = 1000148022,
	kINVERT_EXT = 1000148023,
	kINVERT_RGB_EXT = 1000148024,
	kLINEARDODGE_EXT = 1000148025,
	kLINEARBURN_EXT = 1000148026,
	kVIVIDLIGHT_EXT = 1000148027,
	kLINEARLIGHT_EXT = 1000148028,
	kPINLIGHT_EXT = 1000148029,
	kHARDMIX_EXT = 1000148030,
	kHSL_HUE_EXT = 1000148031,
	kHSL_SATURATION_EXT = 1000148032,
	kHSL_COLOR_EXT = 1000148033,
	kHSL_LUMINOSITY_EXT = 1000148034,
	kPLUS_EXT = 1000148035,
	kPLUS_CLAMPED_EXT = 1000148036,
	kPLUS_CLAMPED_ALPHA_EXT = 1000148037,
	kPLUS_DARKER_EXT = 1000148038,
	kMINUS_EXT = 1000148039,
	kMINUS_CLAMPED_EXT = 1000148040,
	kCONTRAST_EXT = 1000148041,
	kINVERT_OVG_EXT = 1000148042,
	kRED_EXT = 1000148043,
	kGREEN_EXT = 1000148044,
	kBLUE_EXT = 1000148045
};

enum ColorComponentFlags : uint8_t
{
	kR_BIT = 0x00000001,
	kG_BIT = 0x00000002,
	kB_BIT = 0x00000004,
	kA_BIT = 0x00000008,
};

enum struct LogicOp
{
	kCLEAR = 0,
	kAND = 1,
	kAND_REVERSE = 2,
	kCOPY = 3,
	kAND_INVERTED = 4,
	kNO_OP = 5,
	kXOR = 6,
	kOR = 7,
	kNOR = 8,
	kEQUIVALENT = 9,
	kINVERT = 10,
	kOR_REVERSE = 11,
	kCOPY_INVERTED = 12,
	kOR_INVERTED = 13,
	kNAND = 14,
	kSET = 15
};

enum struct AttachmentDescriptionFlags
{
	kMAY_ALIAS_BIT = 0x00000001,
	kBITS_MAX_ENUM = 0x7FFFFFFF
};

enum struct AttachmentLoadOp
{
	/// Preserve the existing contents of the attachment
	kLOAD = 0,

	/// Clear the values to a constant at the start
	kCLEAR = 1,

	/// Existing contents are undefined; we don't care about them
	kDONT_CARE = 2,
};

enum struct AttachmentStoreOp
{
	/// Rendered contents will be stored in memory and can be read later
	kSTORE = 0,

	/// Contents of the framebuffer will be undefined after the rendering operation
	kDONT_CARE = 1,
};

enum struct ImageLayout
{
	kUNDEFINED = 0,
	kGENERAL = 1,
	kCOLOR_ATTACHMENT_OPTIMAL = 2,
	kDEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
	kDEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
	kSHADER_READ_ONLY_OPTIMAL = 5,
	kTRANSFER_SRC_OPTIMAL = 6,
	kTRANSFER_DST_OPTIMAL = 7,
	kPREINITIALIZED = 8,
	kDEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
	kDEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
	kPRESENT_SRC = 1000001002,
	kSHARED_PRESENT = 1000111000,
};

enum struct PipelineBindPoint
{
	kGRAPHICS = 0,
	kCOMPUTE = 1
};

enum RenderFlags
{
	kINDIRECT_COMMAND_READ_BIT = 0x00000001,
	kINDEX_READ_BIT = 0x00000002,
	kVERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
	kUNIFORM_READ_BIT = 0x00000008,
	kINPUT_ATTACHMENT_READ_BIT = 0x00000010,
	kSHADER_READ_BIT = 0x00000020,
	kSHADER_WRITE_BIT = 0x00000040,
	kCOLOR_ATTACHMENT_READ_BIT = 0x00000080,
	kCOLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
	kDEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
	kDEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
	kTRANSFER_READ_BIT = 0x00000800,
	kTRANSFER_WRITE_BIT = 0x00001000,
	kHOST_READ_BIT = 0x00002000,
	kHOST_WRITE_BIT = 0x00004000,
	kMEMORY_READ_BIT = 0x00008000,
	kMEMORY_WRITE_BIT = 0x00010000,
	kCOMMAND_PROCESS_READ_BIT_NVX = 0x00020000,
	kCOMMAND_PROCESS_WRITE_BIT_NVX = 0x00040000,
	kCOLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
};

CLOSE_NAMESPACE(Firestorm);
#endif
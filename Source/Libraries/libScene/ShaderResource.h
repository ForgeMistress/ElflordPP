///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ShaderResource
//
//  Loads up and stores Shader data.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Project Elflord 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef LIBSCENE_SHADERRESOURCE_H_
#define LIBSCENE_SHADERRESOURCE_H_
#pragma once

#include <libIO/ResourceReference.h>
#include <libIO/FileIOMgr.h>
#include <libIO/ResourceReference.h>

#include <json/json.h>
#include <json/reader.h>

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class ShaderResource : public IResourceObject
{
	FIRE_MIRROR_DECLARE(ShaderResource);
	friend class ShaderLoader;
public:
	ShaderResource(LLGL::RenderSystem* renderSystem);
	virtual ~ShaderResource();

private:
	LLGL::RenderSystem* _renderSystem;
	Vector<LLGL::Shader*> _shaders;
	LLGL::ShaderProgram* _shaderProgram{ nullptr };
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct ShaderLoader final
{
	ShaderLoader(ResourceReference* res, LLGL::RenderSystem* system);
	~ShaderLoader();

	Result<RefPtr<IResourceObject>, Error> operator()();
private:
	ResourceReference* _resHandle;
	LLGL::RenderSystem* _system;
	Json::CharReaderBuilder _builder;
	Json::CharReader* _reader;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <>
struct ResourceLoader<ShaderResource>
{
	using load_type     = ShaderLoader;
	using resource_type = ShaderResource;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);

#endif
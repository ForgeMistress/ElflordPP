//
//  RenderMgr
//
//  The rendering system manager. Only one of these should exist per Application.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "RenderMgr.h"

#include "IPipeline.h"

#include <libCore/Logger.h>
#include <libCore/ObjectMaker.h>
#include <libIO/ResourceMgr.h>

#include <libApp/Application.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

RenderMgr::RenderMgr(Application& app)
: _app(app)
, _system(_app)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

RenderMgr::~RenderMgr()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void RenderMgr::Initialize(const char* system)
{
	_system.InitializeSystem();
	FIRE_LOG_DEBUG("Renderer:         Vulkan");
	FIRE_LOG_DEBUG("Device:           ??????");
	FIRE_LOG_DEBUG("Vendor:           ??????");
	FIRE_LOG_DEBUG("Shading Language: ??????");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void RenderMgr::Shutdown()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char* RenderMgr::GetRenderer() const
{
	static const char* str = "";
	return str;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char* RenderMgr::GetDevice() const
{
	static const char* str = "";
	return str;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char* RenderMgr::GetVendor() const
{
	static const char* str = "";
	return str;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char* RenderMgr::GetShadingLanguageName() const
{
	static const char* str = "";
	return str;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//IPipelineLayout::CreateInfo RenderMgr::GetPipelineLayoutInfo() const
//{
//	return IPipelineLayout::CreateInfo();
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//IRenderPass::CreateInfo RenderMgr::GetRenderPassInfo() const
//{
//	IRenderPass::CreateInfo renderPassInfo(_system);
//
//	IRenderPass::CreateInfo::AttachmentDescription attachDesc{};
//	attachDesc.Flags = static_cast<AttachmentDescriptionFlags>(0);
//	attachDesc.Format = _system.GetSwapchainImageFormat();
//	attachDesc.FinalLayout = ImageLayout::kPRESENT_SRC;
//	renderPassInfo.AddAttachmentDesc(attachDesc);
//
//	IRenderPass::CreateInfo::AttachmentReference colorRef;
//	colorRef.Attachment = 0;
//	colorRef.Layout = ImageLayout::kCOLOR_ATTACHMENT_OPTIMAL;
//
//	IRenderPass::CreateInfo::SubpassDescription subpass;
//	subpass.ColorAttachments.push_back(colorRef);
//
//	return renderPassInfo;
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//IPipeline::CreateInfo RenderMgr::GetPipelineCreateInfo() const
//{
//	return IPipeline::CreateInfo(_system);
//}
//
//
//IPipeline::CreateInfo RenderMgr::GetPipelineCreateInfo(Resource<IShaderProgram> shaderStage,
//                                                       IPipelineLayout*         layout,
//                                                       IRenderPass*             renderPass) const
//{
//	IPipeline::CreateInfo pipelineInfo(_system);
//	pipelineInfo.ShaderStage = shaderStage;
//	pipelineInfo.Layout = layout;
//	pipelineInfo.RenderPass = renderPass;
//	pipelineInfo.PipelineColorBlendState.Attachments.push_back(IPipeline::CreateInfo::ColorBlendAttachmentState());
//	return pipelineInfo;
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void RenderMgr::CreateDefaultPipelines()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void RenderMgr::CreateDefaultFramebuffers()
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
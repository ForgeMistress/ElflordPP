///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  MeshResource
//
//  Loads up the vertex data for a mesh and loads it to the video card.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Project Elflord 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "MeshResource.h"

#include <libIO/ResourceIOErrors.h>

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FIRE_MIRROR_DEFINE(Firestorm::MeshResource)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshResource::MeshResource()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshResource::~MeshResource()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshLoader::MeshLoader(RenderMgr& renderMgr)
	: _renderMgr(renderMgr)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshLoader::~MeshLoader()
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshLoader::LoadResult MeshLoader::Load(const ResourceReference& ref)
{
	return FIRE_ERROR(ResourceIOErrors::PROCESSING_ERROR);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
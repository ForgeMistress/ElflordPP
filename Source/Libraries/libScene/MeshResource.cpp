///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  MeshResource
//
//  Loads up the vertex data for a mesh and loads it to the video card.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Project Elflord 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "MeshResource.h"

#include <libIO/ResourceReference.h>
#include <libIO/ResourceIOErrors.h>

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshResource::MeshResource(RenderMgr& renderMgr)
: _renderMgr(renderMgr)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshResource::~MeshResource()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshLoader::MeshLoader(RenderMgr& renderMgr)
: _renderMgr(renderMgr)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshLoader::~MeshLoader()
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MeshLoader::LoadResult MeshLoader::Load(ResourceMgr* resourceMgr, const ResourceReference& ref)
{
	auto path = ref.GetResourcePath();
	if(libIO::FileExists(path))
	{
		auto result = libIO::LoadFile(path);
		if(result.has_value())
		{
			MeshResource* resource = _pool.Get(_renderMgr);
			resource->_data = result.value();
			return RefPtr<IResourceObject>(resource, [this](IResourceObject* ptr) {
				_pool.Return(reinterpret_cast<MeshResource*>(ptr));
			});
		}
		return FIRE_ERROR(ResourceIOErrors::FILE_READ_ERROR, "reading file '" + path + "'\nDetails: "+((String)result.error()));
	}

	return FIRE_ERROR(ResourceIOErrors::FILE_NOT_FOUND_ERROR, "could not find file '"+path+"'");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  FileIOMgr.h
//
//  
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "FileIOMgr.h"

#include "ResourceReference.h"
#include <libIO/libIO.h>

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::ResourceLoader(const ResourceReference&)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoadResult_t ResourceLoader::operator()()
{
	return FIRE_ERROR(ResourceIOErrors::kDefaultLoader,
		"define a new loader for this type numbnuts (specialize ResourceTraits).");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FileIOMgr::FileIOMgr(ObjectMaker& objMaker)
: _objMaker(objMaker)
{
	for(size_t i = 0; i < _numThreads; ++i)
	{
		_threads[i] = Thread(std::bind(&FileIOMgr::ThreadRun, this));
	}
	std::this_thread::sleep_for(std::chrono::milliseconds(1));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FileIOMgr::~FileIOMgr()
{
	Shutdown();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void FileIOMgr::Load(LoadOp_t load)
{
	std::unique_lock lock(_lock);
	_queue.push(load);
	lock.unlock();
	_cv.notify_all();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void FileIOMgr::Shutdown()
{
	_quit = true;
	_cv.notify_all();

	for(size_t i = 0; i < _numThreads; i++)
	{
		if(_threads[i].joinable())
		{
			_threads[i].join();
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void FileIOMgr::ThreadRun()
{
	std::unique_lock lock(_lock);
	do
	{
		_cv.wait(lock, [this] {
			return _queue.size() || _quit;
		});
		if(!_queue.empty() && !_quit)
		{
			auto oper = std::move(_queue.front());
			_queue.pop();
			lock.unlock();

			oper.second(oper.first);

			lock.lock();
		}
	} while(!_quit);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
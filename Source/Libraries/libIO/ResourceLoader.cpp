///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ResourceLoader
//
//  The base class for a resource loader.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "ResourceLoader.h"
#include "ResourceIOErrors.h"
#include "IResourceObject.h"

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult::LoadResult()
: _resource(nullptr)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult::LoadResult(const LoadResult& other)
: _resource(other._resource)
, _error(other._error)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult::LoadResult(LoadResult&& other)
: _resource(std::move(other._resource))
, _error(std::move(other._error))
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult::LoadResult(ResourcePtr&& resource)
: _resource(std::move(resource))
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult::LoadResult(const Error& error)
: _resource(nullptr)
, _error(error)
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult& ResourceLoader::LoadResult::operator=(LoadResult&& other)
{
	if(this != &other)
	{
		_resource = std::move(other._resource);
		_error = std::move(other._error);
	}
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult& ResourceLoader::LoadResult::operator=(const LoadResult& other)
{
	if(this != &other)
	{
		_resource = other._resource;
		_error = other._error;
	}
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourcePtr ResourceLoader::LoadResult::GetResource() const
{
	return _resource;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error ResourceLoader::LoadResult::GetError() const
{
	return _error;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool ResourceLoader::LoadResult::HasError() const
{
	return _error.GetCode() != nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::ResourceLoader()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::~ResourceLoader()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceLoader::LoadResult ResourceLoader::Load(ResourceMgr*,const ResourceReference&)
{
	return FIRE_LOAD_FAIL(ResourceIOErrors::DEFAULT_LOADER, "can not use default loader");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
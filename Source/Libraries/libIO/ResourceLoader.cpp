///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ResourceLoader
//
//  The base class for a resource loader.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "ResourceLoader.h"
#include "ResourceIOErrors.h"
#include "IResourceObject.h"

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoadResult::LoadResult()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoadResult::LoadResult(const LoadResult& other)
: _error(other._error)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoadResult::LoadResult(LoadResult&& other)
: _error(eastl::move(other._error))
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoadResult::LoadResult(const Error& error)
: _error(error)
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoadResult& LoadResult::operator=(LoadResult&& other)
{
	if(this != &other)
	{
		_error = eastl::move(other._error);
	}
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LoadResult& LoadResult::operator=(const LoadResult& other)
{
	if(this != &other)
	{
		_error = other._error;
	}
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error LoadResult::GetError() const
{
	return _error;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool LoadResult::HasError() const
{
	return _error.GetCode() != nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//ResourceLoader::ResourceLoader()
//{
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//ResourceLoader::~ResourceLoader()
//{
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//ResourceLoader::LoadResult ResourceLoader::Load(ResourceMgr*,const ResourceReference&)
//{
//	return FIRE_LOAD_FAIL(ResourceIOErrors::DEFAULT_LOADER, "can not use default loader");
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
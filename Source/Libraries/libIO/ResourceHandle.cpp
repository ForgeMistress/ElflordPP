///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ResourceHandle
//
//  A weak handle to a resource object.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "ResourceHandle.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FIRE_ERRORCODE_DEF(ResourceHandleErrors::NULL_RESOURCE,
	"a null resource was passed to the constructor of the ResourceHandle");

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceHandle::ResourceHandle()
: _obj(nullptr)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceHandle::ResourceHandle(std::future<ResourceLoader::LoadResult>&& future)
: _obj(nullptr)
, _future(std::move(future))
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceHandle::ResourceHandle(const RefPtr<IResourceObject>& obj)
: _error(nullptr)
, _obj(obj)
, _futurePulled(true)
{
	if(!_obj)
	{
		_error = Error(ResourceHandleErrors::NULL_RESOURCE);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceHandle::ResourceHandle(ResourceHandle&& other)
: _error(other._error)
, _obj(other._obj)
, _future(std::move(other._future))
{
	other._error = nullptr;
	other._obj = nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceHandle::~ResourceHandle()
{
	Release();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Error ResourceHandle::GetError() const
{
	PullFutureData();
	return _error;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool ResourceHandle::IsFinished() const
{
	PullFutureData();
	if(!_future.valid())
	{
		return false;
	}
	return _future.wait_for(std::chrono::milliseconds(0)) == std::future_status::ready;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool ResourceHandle::HasError() const
{
	return _error.GetCode() != nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ResourceHandle::Release()
{
	_obj = nullptr;
	_error = nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ResourceHandle::SetFuture(std::future<ResourceLoader::LoadResult>&& future)
{
	_future = std::move(future);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// my life is pain...
void ResourceHandle::PullFutureData() const
{
	if(!_futurePulled)
	{
		try
		{
			if(_future.valid())
			{
				if(_future.wait_for(std::chrono::milliseconds(0)) == std::future_status::ready)
				{
					ResourceLoader::LoadResult result = _future.get();
					_futurePulled = true;
				}
			}
		}
		catch(std::exception& e)
		{
			FIRE_LOG_ERROR("Error Pulling Resource: %s", e.what());
			throw e;
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ResourceHandle::SetFilename(const String& filename)
{
	_filename = filename;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
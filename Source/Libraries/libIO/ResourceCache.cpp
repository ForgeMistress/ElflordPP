///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ResourceCache
//
//  Cache that contains handles to all of the resources that are presently loaded.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "ResourceCache.h"

#include <libCore/RefPtr.h>

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceCache::ResourceCache()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceCache::~ResourceCache()
{
	std::scoped_lock lock(_cacheLock);
	_cache.clear();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool ResourceCache::AddResource(const String& name, const RefPtr<IResourceObject>& resourceObject)
{
	std::scoped_lock lock(_cacheLock);
	auto found = _cache.find(name);
	if(found != _cache.end())
	{
		return false;
	}
	_cache[name] = resourceObject;
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool ResourceCache::HasResource(const String& name)
{
	std::scoped_lock lock(_cacheLock);
	return _cache.find(name) != _cache.end();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourcePtr ResourceCache::FindResource(const String& name) const
{
	std::scoped_lock lock(_cacheLock);
	auto found = _cache.find(name);
	if(found != _cache.end())
	{
		return found->second.lock();
	}
	return nullptr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ResourceCache::ClearOrphanedResources()
{
	std::scoped_lock lock(_cacheLock);

	auto iter = _cache.begin();
	while(iter != _cache.end())
	{
		auto ptr = iter->second;
		if(ptr.expired())
		{
			iter = _cache.erase(iter);
		}
		else
		{
			++iter;
		}
		// orphaned, only used by the cache.
		/*if(ptr.use_count() == 1)
		{
			iter = _cache.erase(iter);
		}
		else
		{
			++iter;
		}*/
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);
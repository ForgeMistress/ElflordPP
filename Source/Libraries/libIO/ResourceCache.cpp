///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ResourceCache
//
//  Cache that contains handles to all of the resources that are presently loaded.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright (c) Project Firestorm 2018
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "ResourceCache.h"

OPEN_NAMESPACE(Firestorm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourcePtr::ResourcePtr(ResourceCache& cache, const String& name, IResourceObject* obj)
: _cache(cache)
, _name(name)
, _obj(obj)
{
	_obj->AddRef();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourcePtr::ResourcePtr(const ResourcePtr& other)
: _cache(other._cache)
, _name(other._name)
, _obj(other._obj)
{
	_obj->AddRef();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourcePtr::~ResourcePtr()
{
	if(_obj)
		_obj->DelRef();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const String& ResourcePtr::GetName() const
{
	return _name;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceCache::ResourceCache()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourceCache::~ResourceCache()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ResourceCache::AddResource(const String& name, IResourceObject* resourceObject)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ResourcePtr ResourceCache::GetResource(const String& name) const
{
	for(size_t i = 0; i < _cache.size(); ++i)
	{
		if(_cache[i].GetName() == name)
		{
			return _cache[i];
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CLOSE_NAMESPACE(Firestorm);